using System;
using Vortex.MUDStructures.Characters;
using System.Linq;

namespace Vortex.Commands
{
	[AttributeUsage(AttributeTargets.Class)]
	public class CommandAttribute : Attribute
	{
		public string Name { get; private set; }

		public CommandAttribute(string name)
		{
			this.Name = name;
		}
	}

	public abstract class BasicCommand
	{
		private CommandAttribute _commandAttributes;

		public abstract bool Execute(PlayerCharacter callingPlayer, string parameters);

		public CommandAttribute CommandAttributes { get { return _commandAttributes; } }

		public BasicCommand()
		{
			_commandAttributes = GetCommandAttributes();
		}

		/// <summary>
		/// Gets the command attributes for this command.  Note: We look only 
		/// for CommandAttribute attributes, so anything else is ignored.  
		/// Also, the order in which the attributes is returned is NOT 
		/// guarenteed, so having more than one CommandAttribute per class 
		/// causes unpredictable behavior.
		/// </summary>
		/// <returns>
		/// The command attributes or null if none were found.
		/// </returns>
		public CommandAttribute GetCommandAttributes()
		{
			object[] attributes = GetType().GetCustomAttributes(typeof(CommandAttribute), true);
			return (CommandAttribute)attributes.FirstOrDefault(); // we only care about the first, or null if there are none.
		}
	}
}
